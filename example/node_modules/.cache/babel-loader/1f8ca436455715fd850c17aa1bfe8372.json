{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _react2 = require(\"@chakra-ui/react\");\n\nvar _dateFns = require(\"date-fns\");\n\nvar _formik = require(\"formik\");\n\nvar _timeHelper = require(\"../utils/timeHelper\");\n\nvar _excluded = [\"size\", \"timeFormats\"],\n    _excluded2 = [\"label\", \"hidden\", \"date\", \"onDate\"];\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar TimeField = function TimeField(_ref) {\n  var _ = _ref.size,\n      timeFormats = _ref.timeFormats,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useField = (0, _formik.useField)(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      error = _useField2[1].error;\n\n  var label = props.label,\n      hidden = props.hidden,\n      date = props.date,\n      onDate = props.onDate,\n      rest = _objectWithoutProperties(props, _excluded2);\n\n  var formattedTime = (0, _dateFns.format)(date, timeFormats[0]);\n  return /*#__PURE__*/_react[\"default\"].createElement(_react2.FormControl, {\n    isInvalid: !!error\n  }, /*#__PURE__*/_react[\"default\"].createElement(_react2.FormLabel, {\n    htmlFor: field.name,\n    hidden: hidden,\n    marginBottom: 'auto'\n  }, label), /*#__PURE__*/_react[\"default\"].createElement(_react2.HStack, null, /*#__PURE__*/_react[\"default\"].createElement(_react2.Input, _extends({\n    width: '20',\n    id: field.name\n  }, field, rest, {\n    placeholder: formattedTime,\n    onChange: function onChange(event) {\n      var _field$onChange;\n\n      (_field$onChange = field.onChange) === null || _field$onChange === void 0 ? void 0 : _field$onChange.call(field, event);\n      var value = event.target.value;\n      var dateTime = (0, _timeHelper.parseTimeUsingDate)(undefined, value, date, timeFormats);\n\n      if ((0, _dateFns.isValid)(dateTime)) {\n        date.setHours(dateTime.getHours());\n        date.setMinutes(dateTime.getMinutes());\n        onDate(date);\n      }\n    }\n  })), /*#__PURE__*/_react[\"default\"].createElement(_react2.Button, {\n    variant: 'outline',\n    padding: 0,\n    onClick: function onClick() {\n      var hours = date.getHours();\n      date.setHours(hours < 12 ? hours + 12 : hours - 12);\n      onDate(date);\n    }\n  }, date.getHours() < 12 ? 'AM' : 'PM')), error ? /*#__PURE__*/_react[\"default\"].createElement(_react2.FormErrorMessage, null, error) : null);\n};\n\nvar _default = TimeField;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../../../src/lib/components/weekPlanner/timeTable/TimeField.tsx"],"names":["TimeField","size","_","timeFormats","props","field","error","label","hidden","date","onDate","rest","formattedTime","name","value","event","dateTime","hours"],"mappings":"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","sourcesContent":["import React, { InputHTMLAttributes } from 'react'\nimport {\n  Button,\n  HStack,\n  FormControl,\n  FormLabel,\n  Input,\n  FormErrorMessage,\n} from '@chakra-ui/react'\nimport { format, isValid } from 'date-fns'\nimport { useField } from 'formik'\nimport { parseTimeUsingDate } from '../utils/timeHelper'\n\ntype TimeFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n  label: string\n  name: string\n  date: Date\n  onDate: (date: Date) => void\n  timeFormats: string[]\n}\n\nconst TimeField: React.FC<TimeFieldProps> = ({\n  size: _,\n  timeFormats,\n  ...props\n}) => {\n  const [field, { error }] = useField(props)\n  const { label, hidden, date, onDate, ...rest } = props\n  const formattedTime = format(date, timeFormats[0])\n\n  return (\n    <FormControl isInvalid={!!error}>\n      <FormLabel htmlFor={field.name} hidden={hidden} marginBottom={'auto'}>\n        {label}\n      </FormLabel>\n      <HStack>\n        <Input\n          width={'20'}\n          id={field.name}\n          {...field}\n          {...rest}\n          placeholder={formattedTime}\n          onChange={(event) => {\n            field.onChange?.(event)\n            const value = event.target.value\n            const dateTime: Date = parseTimeUsingDate(\n              undefined,\n              value,\n              date,\n              timeFormats\n            )\n            if (isValid(dateTime)) {\n              date.setHours(dateTime.getHours())\n              date.setMinutes(dateTime.getMinutes())\n              onDate(date)\n            }\n          }}\n        />\n        <Button\n          variant={'outline'}\n          padding={0}\n          onClick={() => {\n            const hours = date.getHours()\n            date.setHours(hours < 12 ? hours + 12 : hours - 12)\n            onDate(date)\n          }}\n        >\n          {date.getHours() < 12 ? 'AM' : 'PM'}\n        </Button>\n      </HStack>\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n    </FormControl>\n  )\n}\n\nexport default TimeField\n"]},"metadata":{},"sourceType":"script"}