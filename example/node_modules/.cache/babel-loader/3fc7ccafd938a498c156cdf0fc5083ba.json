{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = require(\"@chakra-ui/react\");\n\nvar _formik = require(\"formik\");\n\nvar _react2 = _interopRequireDefault(require(\"react\"));\n\nvar _excluded = [\"size\"];\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar InputField = function InputField(_ref) {\n  var _ = _ref.size,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var _useField = (0, _formik.useField)(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      error = _useField2[1].error;\n\n  var label = props.label,\n      hidden = props.hidden;\n  return /*#__PURE__*/_react2.default.createElement(_react.FormControl, {\n    isInvalid: !!error\n  }, /*#__PURE__*/_react2.default.createElement(_react.FormLabel, {\n    htmlFor: field.name,\n    hidden: hidden,\n    margin: 'auto'\n  }, label), /*#__PURE__*/_react2.default.createElement(_react.Input, _extends({}, field, props, {\n    id: field.name\n  })), error ? /*#__PURE__*/_react2.default.createElement(_react.FormErrorMessage, null, error) : null);\n};\n\nvar _default = InputField;\nexports.default = _default;","map":{"version":3,"sources":["../../../../../src/lib/components/weekPlanner/timeTable/InputField.tsx"],"names":["InputField","size","_","props","field","error","label","hidden","name"],"mappings":";;;;;;;AAAA,IAAA,MAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAMA,IAAA,OAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AACA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAMA,UAAqC,GAAG,SAAxCA,UAAwC,CAAA,IAAA,EAA2B;AAAA,MAAlBE,CAAkB,GAAA,IAAA,CAAxBD,IAAwB;AAAA,MAAZE,KAAY,GAAA,wBAAA,CAAA,IAAA,EAAA,SAAA,CAAA;;AACvE,MAAA,SAAA,GAA2B,CAAA,GAAA,OAAA,CAAA,QAAA,EAA3B,KAA2B,CAA3B;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAAOC,KAAP,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAAgBC,KAAhB,GAAA,UAAA,CAAA,CAAA,CAAA,CAAA,KAAA;;AACA,MAAQC,KAAR,GAA0BH,KAA1B,CAAA,KAAA;AAAA,MAAeI,MAAf,GAA0BJ,KAA1B,CAAA,MAAA;AACA,SAAA,aACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAD,WAAA,EAAA;AAAa,IAAA,SAAS,EAAE,CAAC,CAACE;AAA1B,GAAA,EAAA,aACE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAD,SAAA,EAAA;AAAW,IAAA,OAAO,EAAED,KAAK,CAAzB,IAAA;AAAgC,IAAA,MAAM,EAAtC,MAAA;AAAgD,IAAA,MAAM,EAAE;AAAxD,GAAA,EADF,KACE,CADF,EAAA,aAIE,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAD,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA;AAA6B,IAAA,EAAE,EAAEA,KAAK,CAACI;AAAvC,GAAA,CAAA,CAJF,EAKGH,KAAK,GAAA,aAAG,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,MAAA,CAAD,gBAAA,EAAA,IAAA,EAAH,KAAG,CAAH,GANV,IACE,CADF;AAHF,CAAA;;eAceL,U","sourcesContent":["import {\n  FormControl,\n  FormErrorMessage,\n  FormLabel,\n  Input,\n} from '@chakra-ui/react'\nimport { useField } from 'formik'\nimport React, { InputHTMLAttributes } from 'react'\n\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\n  label?: string\n  name: string\n  placeholder: string\n}\n\nconst InputField: React.FC<InputFieldProps> = ({ size: _, ...props }) => {\n  const [field, { error }] = useField(props)\n  const { label, hidden } = props\n  return (\n    <FormControl isInvalid={!!error}>\n      <FormLabel htmlFor={field.name} hidden={hidden} margin={'auto'}>\n        {label}\n      </FormLabel>\n      <Input {...field} {...props} id={field.name} />\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\n    </FormControl>\n  )\n}\n\nexport default InputField\n"]},"metadata":{},"sourceType":"script"}