{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _react2 = require(\"@chakra-ui/react\");\n\nvar _dateFns = require(\"date-fns\");\n\nvar _dayHours = _interopRequireDefault(require(\"../utils/dayHours\"));\n\nvar _weekDays = _interopRequireDefault(require(\"../utils/weekDays\"));\n\nvar _WeekPlannerConfig = require(\"../utils/WeekPlannerConfig\");\n\nvar _MinuteIndicator = _interopRequireDefault(require(\"../MinuteIndicator\"));\n\nvar _EventBox = _interopRequireDefault(require(\"./EventBox\"));\n\nvar _EventModal = _interopRequireDefault(require(\"./EventModal\"));\n\nvar _timeHelper = require(\"../utils/timeHelper\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nvar TimeTableCells = function TimeTableCells(_ref) {\n  var date = _ref.date,\n      events = _ref.events,\n      setEvents = _ref.setEvents,\n      gap = _ref.gap,\n      _ref$config = _ref.config,\n      config = _ref$config === void 0 ? _WeekPlannerConfig.defaultConfig : _ref$config;\n  var timeslotHeight = config.timeslotHeight,\n      eventTypes = config.eventTypes,\n      minuteIndicator = config.minuteIndicator,\n      isSkeleton = config.isSkeleton,\n      isLoading = config.isLoading;\n  var hours = (0, _dayHours[\"default\"])();\n  var currentHour = new Date().getHours();\n  var defaultEventType = eventTypes[0].value;\n  var filteredEventTypes = eventTypes.filter(function (eventType) {\n    return eventType.isDefault;\n  });\n\n  if (filteredEventTypes && filteredEventTypes.length > 0) {\n    defaultEventType = filteredEventTypes[0].value;\n  }\n\n  var DaysOfHour = function DaysOfHour(_ref2) {\n    var day = _ref2.day,\n        hour = _ref2.hour;\n\n    var _useDisclosure = (0, _react2.useDisclosure)(),\n        isOpen = _useDisclosure.isOpen,\n        onOpen = _useDisclosure.onOpen,\n        onClose = _useDisclosure.onClose;\n\n    var accurateDate = day.raw;\n    accurateDate.setHours(hour.raw);\n    var isCurrentHourBox = hour.raw === currentHour;\n    return /*#__PURE__*/_react[\"default\"].createElement(_react2.Box, {\n      height: \"\".concat(timeslotHeight, \"px\"),\n      bg: \"white\",\n      position: \"relative\",\n      onClick: onOpen,\n      cursor: \"pointer\"\n    }, isLoading || isSkeleton ? /*#__PURE__*/_react[\"default\"].createElement(_react2.Skeleton, {\n      width: \"full\",\n      height: \"full\"\n    }) : /*#__PURE__*/_react[\"default\"].createElement(_react[\"default\"].Fragment, null, events.map(function (event) {\n      return /*#__PURE__*/_react[\"default\"].createElement(_react2.Box, {\n        key: \"\".concat(event.id)\n      }, (0, _timeHelper.isStartingThisHour)(event, accurateDate) || (0, _timeHelper.isResumingFromPast)(event, accurateDate) ? /*#__PURE__*/_react[\"default\"].createElement(_EventBox[\"default\"], {\n        event: event,\n        multidayState: (0, _timeHelper.getMultiDayState)(event, accurateDate),\n        onSave: function onSave(event) {\n          var oldEvents = events.filter(function (oldEvent) {\n            return event.id !== oldEvent.id;\n          });\n          if (setEvents) setEvents([].concat(_toConsumableArray(oldEvents), [event]));\n        },\n        onDelete: function onDelete(eventId) {\n          if (setEvents) setEvents(events.filter(function (oldEvent) {\n            return oldEvent.id !== eventId;\n          }));\n        },\n        config: config\n      }) : null);\n    }), isCurrentHourBox && (0, _dateFns.isToday)(day.raw) && minuteIndicator ? /*#__PURE__*/_react[\"default\"].createElement(_MinuteIndicator[\"default\"], null) : null, isOpen ? /*#__PURE__*/_react[\"default\"].createElement(_EventModal[\"default\"], {\n      isOpen: isOpen,\n      onClose: onClose,\n      event: {\n        title: '',\n        start: accurateDate,\n        end: (0, _dateFns.add)(accurateDate, {\n          hours: 1\n        }),\n        notes: '',\n        type: defaultEventType\n      },\n      onSave: function onSave(event) {\n        if (setEvents) setEvents([].concat(_toConsumableArray(events), [event]));\n      },\n      onDelete: function onDelete() {},\n      config: config\n    }) : null));\n  };\n\n  return /*#__PURE__*/_react[\"default\"].createElement(_react2.SimpleGrid, {\n    flex: 1,\n    columns: 7,\n    gap: gap,\n    position: \"relative\"\n  }, hours.flatMap(function (hour) {\n    return (0, _weekDays[\"default\"])(date).map(function (day, _) {\n      return /*#__PURE__*/_react[\"default\"].createElement(DaysOfHour, {\n        key: \"\".concat(day.raw, \"-\").concat(hour.raw),\n        hour: hour,\n        day: day\n      });\n    });\n  }));\n};\n\nvar _default = TimeTableCells;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../../../src/lib/components/weekPlanner/timeTable/TimeTableCells.tsx"],"names":["TimeTableCells","date","events","setEvents","gap","config","defaultConfig","timeslotHeight","eventTypes","minuteIndicator","isSkeleton","isLoading","hours","currentHour","defaultEventType","filteredEventTypes","eventType","DaysOfHour","day","hour","isOpen","onOpen","onClose","accurateDate","isCurrentHourBox","event","oldEvents","oldEvent","title","start","end","notes","type"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n  Box,\n  SimpleGrid,\n  Skeleton,\n  SystemProps,\n  useDisclosure,\n} from '@chakra-ui/react'\nimport { add, isToday } from 'date-fns'\nimport dayHours, { DayHour } from '../utils/dayHours'\nimport WeekEvent from '../WeekEvent'\nimport weekDays, { WeekDay } from '../utils/weekDays'\nimport { WeekPlannerConfig, defaultConfig } from '../utils/WeekPlannerConfig'\nimport MinuteIndicator from '../MinuteIndicator'\nimport EventBox from './EventBox'\nimport EventModal from './EventModal'\nimport {\n  getMultiDayState,\n  isResumingFromPast,\n  isStartingThisHour,\n} from '../utils/timeHelper'\n\ninterface TimeTableCellsProps {\n  date: Date\n  events: WeekEvent[]\n  setEvents?: (events: WeekEvent[]) => void\n  gap: SystemProps['gridGap']\n  config?: WeekPlannerConfig\n}\n\nconst TimeTableCells = ({\n  date,\n  events,\n  setEvents,\n  gap,\n  config = defaultConfig,\n}: TimeTableCellsProps) => {\n  const { timeslotHeight, eventTypes, minuteIndicator, isSkeleton, isLoading } =\n    config\n\n  const hours = dayHours()\n  const currentHour = new Date().getHours()\n\n  let defaultEventType = eventTypes[0].value\n  const filteredEventTypes = eventTypes.filter(\n    (eventType) => eventType.isDefault\n  )\n  if (filteredEventTypes && filteredEventTypes.length > 0) {\n    defaultEventType = filteredEventTypes[0].value\n  }\n\n  const DaysOfHour = ({ day, hour }: { day: WeekDay; hour: DayHour }) => {\n    const { isOpen, onOpen, onClose } = useDisclosure()\n    const accurateDate = day.raw\n    accurateDate.setHours(hour.raw)\n    const isCurrentHourBox = hour.raw === currentHour\n    return (\n      <Box\n        height={`${timeslotHeight}px`}\n        bg=\"white\"\n        position=\"relative\"\n        onClick={onOpen}\n        cursor=\"pointer\"\n      >\n        {isLoading || isSkeleton ? (\n          <Skeleton width=\"full\" height=\"full\" />\n        ) : (\n          <>\n            {events.map((event) => {\n              return (\n                <Box key={`${event.id}`}>\n                  {isStartingThisHour(event, accurateDate) ||\n                  isResumingFromPast(event, accurateDate) ? (\n                    <EventBox\n                      event={event}\n                      multidayState={getMultiDayState(event, accurateDate)}\n                      onSave={(event) => {\n                        const oldEvents = events.filter(\n                          (oldEvent) => event.id !== oldEvent.id\n                        )\n                        if (setEvents) setEvents([...oldEvents, event])\n                      }}\n                      onDelete={(eventId) => {\n                        if (setEvents)\n                          setEvents(\n                            events.filter((oldEvent) => oldEvent.id !== eventId)\n                          )\n                      }}\n                      config={config}\n                    />\n                  ) : null}\n                </Box>\n              )\n            })}\n            {isCurrentHourBox && isToday(day.raw) && minuteIndicator ? (\n              <MinuteIndicator />\n            ) : null}\n            {isOpen ? (\n              <EventModal\n                isOpen={isOpen}\n                onClose={onClose}\n                event={{\n                  title: '',\n                  start: accurateDate,\n                  end: add(accurateDate, { hours: 1 }),\n                  notes: '',\n                  type: defaultEventType,\n                }}\n                onSave={(event) => {\n                  if (setEvents) setEvents([...events, event])\n                }}\n                onDelete={() => {}}\n                config={config}\n              />\n            ) : null}\n          </>\n        )}\n      </Box>\n    )\n  }\n\n  return (\n    <SimpleGrid flex={1} columns={7} gap={gap} position=\"relative\">\n      {hours.flatMap((hour) => {\n        return weekDays(date).map((day, _) => (\n          <DaysOfHour key={`${day.raw}-${hour.raw}`} hour={hour} day={day} />\n        ))\n      })}\n    </SimpleGrid>\n  )\n}\n\nexport default TimeTableCells\n"]},"metadata":{},"sourceType":"script"}