{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _react2 = require(\"@chakra-ui/react\");\n\nvar _dateFns = require(\"date-fns\");\n\nvar _WeekEvent = require(\"../WeekEvent\");\n\nvar _WeekPlannerConfig = require(\"../utils/WeekPlannerConfig\");\n\nvar _EventModal = _interopRequireDefault(require(\"./EventModal\"));\n\nvar _bi = require(\"react-icons/bi\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar EventBox = function EventBox(_ref) {\n  var event = _ref.event,\n      multidayState = _ref.multidayState,\n      onSave = _ref.onSave,\n      onDelete = _ref.onDelete,\n      _ref$config = _ref.config,\n      config = _ref$config === void 0 ? _WeekPlannerConfig.defaultConfig : _ref$config;\n  var calendarGripGap = config.calendarGripGap,\n      eventTypes = config.eventTypes;\n\n  var _useDisclosure = (0, _react2.useDisclosure)(),\n      isOpen = _useDisclosure.isOpen,\n      onOpen = _useDisclosure.onOpen,\n      onClose = _useDisclosure.onClose;\n\n  var backgroundColor = 'gray';\n  var filteredEventType = eventTypes.filter(function (eventType) {\n    return eventType.value === event.type;\n  });\n\n  if (filteredEventType && filteredEventType.length > 0) {\n    var eventType = filteredEventType[0];\n    backgroundColor = eventType.colorScheme;\n  }\n\n  var start = new Date(event.start.getTime());\n  start.setHours(24, 0, 0, 0);\n  var nearestMidnightInFuture = start;\n  var end = new Date(event.end.getTime());\n  end.setHours(0, 0, 0, 0);\n  var lastMidnightBeforeEnd = end;\n  var oClockFormat = 'h a';\n  var regularFormat = 'h:m a';\n  var formattingRule = start.getMinutes() === 0 ? oClockFormat : regularFormat; // For first day\n\n  var fromStartToEnd = (0, _dateFns.differenceInMinutes)(event.end, event.start) + ((0, _dateFns.differenceInHours)(event.end, event.start) - 1) * calendarGripGap;\n  var fromStartToMidnight = (0, _dateFns.differenceInMinutes)(nearestMidnightInFuture, event.start) + ((0, _dateFns.differenceInHours)(nearestMidnightInFuture, event.start) - 1) * calendarGripGap;\n  var heightOnFirstDay = Math.min(fromStartToEnd, fromStartToMidnight); // For last day\n\n  var fromMidnightToEnd = (0, _dateFns.differenceInMinutes)(event.end, lastMidnightBeforeEnd) + ((0, _dateFns.differenceInHours)(event.end, lastMidnightBeforeEnd) - 1) * calendarGripGap;\n  var heightOnLastDay = fromMidnightToEnd; // For middle day\n\n  var hoursInDay = 24;\n  var minutesInDay = 60 * hoursInDay;\n  var fromMidnightToMidnight = minutesInDay + (hoursInDay - 1) * calendarGripGap;\n  var heightOnMiddleDay = fromMidnightToMidnight;\n  var top;\n  var height;\n  var showtime;\n\n  switch (multidayState) {\n    case _WeekEvent.MultidayState.FIRST_DAY:\n      top = (0, _dateFns.getMinutes)(event.start);\n      height = heightOnFirstDay;\n      showtime = true;\n      break;\n\n    case _WeekEvent.MultidayState.MIDDLE_DAY:\n      top = 0;\n      height = heightOnMiddleDay;\n      showtime = false;\n      break;\n\n    case _WeekEvent.MultidayState.LAST_DAY:\n      top = 0;\n      height = heightOnLastDay;\n      showtime = false;\n      break;\n  } // Title appearance based on duration\n\n\n  var hourInMin = 60;\n  var fifteenMin = hourInMin / 4;\n  var twentyMin = hourInMin / 3;\n  var twentyFiveMin = hourInMin / 2.4;\n  var duration = (0, _dateFns.differenceInMinutes)(event.end, event.start);\n\n  if (duration <= hourInMin / 1.5) {\n    showtime = false;\n  }\n\n  return /*#__PURE__*/_react.default.createElement(_react2.Flex, {\n    key: \"\".concat(event.id),\n    zIndex: \"overlay\",\n    position: \"absolute\",\n    top: \"\".concat(top, \"px\"),\n    height: \"\".concat(height, \"px\"),\n    minHeight: \"\".concat(fifteenMin, \"px\"),\n    maxHeight: \"\".concat(Math.max(height, fifteenMin), \"px\"),\n    width: \"full\",\n    onClick: function onClick(event) {\n      onOpen();\n      event.stopPropagation();\n    }\n  }, /*#__PURE__*/_react.default.createElement(_react2.Box, {\n    backgroundColor: backgroundColor,\n    opacity: 0.8,\n    flex: 1,\n    rounded: \"lg\",\n    padding: height > twentyFiveMin ? 1 : 0,\n    paddingX: 1,\n    margin: \"1px\",\n    color: \"white\",\n    cursor: \"pointer\",\n    width: \"full\"\n  }, showtime ? /*#__PURE__*/_react.default.createElement(_react2.HStack, null, /*#__PURE__*/_react.default.createElement(_react2.Text, {\n    fontSize: \"small\",\n    lineHeight: 1\n  }, (0, _dateFns.format)(event.start, formattingRule)), /*#__PURE__*/_react.default.createElement(_react2.Spacer, null), event.notes && showtime ? /*#__PURE__*/_react.default.createElement(_react2.Icon, {\n    as: _bi.BiPencil\n  }) : null) : null, /*#__PURE__*/_react.default.createElement(_react2.HStack, {\n    spacing: 1\n  }, !event.notes || showtime ? null : /*#__PURE__*/_react.default.createElement(_react2.Icon, {\n    boxSize: 3,\n    as: _bi.BiPencil\n  }), /*#__PURE__*/_react.default.createElement(_react2.Text, {\n    fontSize: height > twentyFiveMin ? 'small' : 'x-small',\n    fontWeight: \"semibold\",\n    noOfLines: height < hourInMin ? 1 : Math.floor(height / twentyMin) - 1\n  }, event.title))), isOpen ? /*#__PURE__*/_react.default.createElement(_EventModal.default, {\n    isOpen: isOpen,\n    onClose: onClose,\n    event: event,\n    onSave: onSave,\n    onDelete: onDelete,\n    config: config\n  }) : null);\n};\n\nvar _default = EventBox;\nexports.default = _default;","map":{"version":3,"sources":["../../../../../src/lib/components/weekPlanner/timeTable/EventBox.tsx"],"names":["EventBox","event","multidayState","onSave","onDelete","config","defaultConfig","calendarGripGap","eventTypes","isOpen","onOpen","onClose","backgroundColor","filteredEventType","eventType","start","nearestMidnightInFuture","end","lastMidnightBeforeEnd","oClockFormat","regularFormat","formattingRule","fromStartToEnd","fromStartToMidnight","heightOnFirstDay","Math","fromMidnightToEnd","heightOnLastDay","hoursInDay","minutesInDay","fromMidnightToMidnight","heightOnMiddleDay","MultidayState","top","height","showtime","hourInMin","fifteenMin","twentyMin","twentyFiveMin","duration","BiPencil"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {\n  Box,\n  Text,\n  Flex,\n  useDisclosure,\n  HStack,\n  Icon,\n  Spacer,\n} from '@chakra-ui/react'\nimport {\n  format,\n  getMinutes,\n  differenceInMinutes,\n  differenceInHours,\n} from 'date-fns'\nimport WeekEvent, { MultidayState } from '../WeekEvent'\nimport { WeekPlannerConfig, defaultConfig } from '../utils/WeekPlannerConfig'\nimport EventModal from './EventModal'\nimport { BiPencil } from 'react-icons/bi'\n\ninterface EventBoxProps {\n  event: WeekEvent\n  multidayState: MultidayState\n  onSave: (event: WeekEvent) => void\n  onDelete: (event: WeekEvent['id']) => void\n  config?: WeekPlannerConfig\n}\n\nconst EventBox = ({\n  event,\n  multidayState,\n  onSave,\n  onDelete,\n  config = defaultConfig,\n}: EventBoxProps) => {\n  const { calendarGripGap, eventTypes } = config\n  const { isOpen, onOpen, onClose } = useDisclosure()\n\n  let backgroundColor = 'gray'\n  const filteredEventType = eventTypes.filter(\n    (eventType) => eventType.value === event.type\n  )\n  if (filteredEventType && filteredEventType.length > 0) {\n    const eventType = filteredEventType[0]\n    backgroundColor = eventType.colorScheme\n  }\n\n  const start = new Date(event.start.getTime())\n  start.setHours(24, 0, 0, 0)\n  const nearestMidnightInFuture = start\n\n  const end = new Date(event.end.getTime())\n  end.setHours(0, 0, 0, 0)\n  const lastMidnightBeforeEnd = end\n\n  const oClockFormat = 'h a'\n  const regularFormat = 'h:m a'\n  const formattingRule = start.getMinutes() === 0 ? oClockFormat : regularFormat\n\n  // For first day\n  const fromStartToEnd =\n    differenceInMinutes(event.end, event.start) +\n    (differenceInHours(event.end, event.start) - 1) * calendarGripGap\n  const fromStartToMidnight =\n    differenceInMinutes(nearestMidnightInFuture, event.start) +\n    (differenceInHours(nearestMidnightInFuture, event.start) - 1) *\n      calendarGripGap\n  const heightOnFirstDay = Math.min(fromStartToEnd, fromStartToMidnight)\n\n  // For last day\n  const fromMidnightToEnd =\n    differenceInMinutes(event.end, lastMidnightBeforeEnd) +\n    (differenceInHours(event.end, lastMidnightBeforeEnd) - 1) * calendarGripGap\n  const heightOnLastDay = fromMidnightToEnd\n\n  // For middle day\n  const hoursInDay = 24\n  const minutesInDay = 60 * hoursInDay\n  const fromMidnightToMidnight =\n    minutesInDay + (hoursInDay - 1) * calendarGripGap\n  const heightOnMiddleDay = fromMidnightToMidnight\n\n  let top: number\n  let height: number\n  let showtime: boolean\n  switch (multidayState) {\n    case MultidayState.FIRST_DAY:\n      top = getMinutes(event.start)\n      height = heightOnFirstDay\n      showtime = true\n      break\n    case MultidayState.MIDDLE_DAY:\n      top = 0\n      height = heightOnMiddleDay\n      showtime = false\n      break\n    case MultidayState.LAST_DAY:\n      top = 0\n      height = heightOnLastDay\n      showtime = false\n      break\n  }\n\n  // Title appearance based on duration\n  const hourInMin = 60\n  const fifteenMin = hourInMin / 4\n  const twentyMin = hourInMin / 3\n  const twentyFiveMin = hourInMin / 2.4\n  const duration = differenceInMinutes(event.end, event.start)\n  if (duration <= hourInMin / 1.5) {\n    showtime = false\n  }\n\n  return (\n    <Flex\n      key={`${event.id}`}\n      zIndex=\"overlay\"\n      position=\"absolute\"\n      top={`${top}px`}\n      height={`${height}px`}\n      minHeight={`${fifteenMin}px`}\n      maxHeight={`${Math.max(height, fifteenMin)}px`}\n      width=\"full\"\n      onClick={(event) => {\n        onOpen()\n        event.stopPropagation()\n      }}\n    >\n      <Box\n        backgroundColor={backgroundColor}\n        opacity={0.8}\n        flex={1}\n        rounded=\"lg\"\n        padding={height > twentyFiveMin ? 1 : 0}\n        paddingX={1}\n        margin=\"1px\"\n        color=\"white\"\n        cursor=\"pointer\"\n        width=\"full\"\n      >\n        {showtime ? (\n          <HStack>\n            <Text fontSize=\"small\" lineHeight={1}>\n              {format(event.start, formattingRule)}\n            </Text>\n            <Spacer />\n            {event.notes && showtime ? <Icon as={BiPencil} /> : null}\n          </HStack>\n        ) : null}\n        <HStack spacing={1}>\n          {!event.notes || showtime ? null : <Icon boxSize={3} as={BiPencil} />}\n          <Text\n            fontSize={height > twentyFiveMin ? 'small' : 'x-small'}\n            fontWeight=\"semibold\"\n            noOfLines={\n              height < hourInMin ? 1 : Math.floor(height / twentyMin) - 1\n            }\n          >\n            {event.title}\n          </Text>\n        </HStack>\n      </Box>\n      {isOpen ? (\n        <EventModal\n          isOpen={isOpen}\n          onClose={onClose}\n          event={event}\n          onSave={onSave}\n          onDelete={onDelete}\n          config={config}\n        />\n      ) : null}\n    </Flex>\n  )\n}\n\nexport default EventBox\n"]},"metadata":{},"sourceType":"script"}