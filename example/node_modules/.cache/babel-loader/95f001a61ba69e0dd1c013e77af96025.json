{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _react2 = require(\"@chakra-ui/react\");\n\nvar _dateFns = require(\"date-fns\");\n\nvar _WeekPlannerConfig = require(\"../utils/WeekPlannerConfig\");\n\nvar _dayHours = _interopRequireDefault(require(\"../utils/dayHours\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new WeakMap();\n  var cacheNodeInterop = new WeakMap();\n  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      \"default\": obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj[\"default\"] = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nvar TimeColumn = function TimeColumn(_ref) {\n  var date = _ref.date,\n      gap = _ref.gap,\n      _ref$config = _ref.config,\n      config = _ref$config === void 0 ? _WeekPlannerConfig.defaultConfig : _ref$config;\n  var timeslotHeight = config.timeslotHeight,\n      isSkeleton = config.isSkeleton;\n  var currentTimeRef = (0, _react.useRef)(null);\n  (0, _react.useEffect)(function () {\n    if (isSkeleton) return;\n    var currentTime = currentTimeRef.current;\n    if (!currentTime) return;\n    currentTime.scrollIntoView({\n      block: 'center',\n      behavior: 'smooth'\n    });\n  }, [currentTimeRef, date, isSkeleton]);\n  return /*#__PURE__*/_react[\"default\"].createElement(_react2.SimpleGrid, {\n    columns: 1,\n    gap: gap\n  }, (0, _dayHours[\"default\"])(date).map(function (hour) {\n    return /*#__PURE__*/_react[\"default\"].createElement(_react2.Box, {\n      ref: (0, _dateFns.isThisHour)(new Date(date.getFullYear(), date.getMonth(), date.getDate(), hour.raw)) ? currentTimeRef : undefined,\n      key: hour.label,\n      height: \"\".concat(timeslotHeight, \"px\")\n    }, /*#__PURE__*/_react[\"default\"].createElement(_react2.Center, null, /*#__PURE__*/_react[\"default\"].createElement(_react2.Text, {\n      fontWeight: \"semibold\"\n    }, hour.label)));\n  }));\n};\n\nvar _default = TimeColumn;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../../../../src/lib/components/weekPlanner/timeTable/TimeColumn.tsx"],"names":["TimeColumn","date","gap","config","defaultConfig","timeslotHeight","isSkeleton","currentTimeRef","currentTime","block","behavior","hour"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,MAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,kBAAA,GAAA,OAAA,CAAA,4BAAA,CAAA;;AACA,IAAA,SAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,mBAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAAA,IAAA,EAA4D;AAAA,MAAzDC,IAAyD,GAAA,IAAA,CAAzDA,IAAyD;AAAA,MAAnDC,GAAmD,GAAA,IAAA,CAAnDA,GAAmD;AAAA,MAAA,WAAA,GAAA,IAAA,CAA9CC,MAA8C;AAAA,MAA9CA,MAA8C,GAAA,WAAA,KAAA,KAAA,CAAA,GAArCC,kBAAAA,CAAAA,aAAqC,GAAA,WAAA;AAC7E,MAAQC,cAAR,GAAuCF,MAAvC,CAAA,cAAA;AAAA,MAAwBG,UAAxB,GAAuCH,MAAvC,CAAA,UAAA;AACA,MAAMI,cAAc,GAAG,CAAA,GAAA,MAAA,CAAA,MAAA,EAAvB,IAAuB,CAAvB;AACA,GAAA,GAAA,MAAA,CAAA,SAAA,EAAU,YAAM;AACd,QAAA,UAAA,EAAgB;AAChB,QAAMC,WAAW,GAAGD,cAAc,CAAlC,OAAA;AACA,QAAI,CAAJ,WAAA,EAAkB;AAClBC,IAAAA,WAAW,CAAXA,cAAAA,CAA2B;AAAEC,MAAAA,KAAK,EAAP,QAAA;AAAmBC,MAAAA,QAAQ,EAAE;AAA7B,KAA3BF;AAJF,GAAA,EAKG,CAAA,cAAA,EAAA,IAAA,EALH,UAKG,CALH;AAOA,SAAA,aACE,MAAA,CAAA,SAAA,CAAA,CAAA,aAAA,CAAC,OAAA,CAAD,UAAA,EAAA;AAAY,IAAA,OAAO,EAAnB,CAAA;AAAwB,IAAA,GAAG,EAAEN;AAA7B,GAAA,EACG,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,EAAA,IAAA,EAAA,GAAA,CAAmB,UAAA,IAAA,EAAA;AAAA,WAAA,aAClB,MAAA,CAAA,SAAA,CAAA,CAAA,aAAA,CAAC,OAAA,CAAD,GAAA,EAAA;AACE,MAAA,GAAG,EACD,CAAA,GAAA,QAAA,CAAA,UAAA,EACE,IAAA,IAAA,CACED,IAAI,CADN,WACEA,EADF,EAEEA,IAAI,CAFN,QAEEA,EAFF,EAGEA,IAAI,CAHN,OAGEA,EAHF,EAIEU,IAAI,CALR,GACE,CADF,IAAA,cAAA,GAFJ,SAAA;AAaE,MAAA,GAAG,EAAEA,IAAI,CAbX,KAAA;AAcE,MAAA,MAAM,EAAA,GAAA,MAAA,CAAA,cAAA,EAAA,IAAA;AAdR,KAAA,EAAA,aAgBE,MAAA,CAAA,SAAA,CAAA,CAAA,aAAA,CAAC,OAAA,CAAD,MAAA,EAAA,IAAA,EAAA,aACE,MAAA,CAAA,SAAA,CAAA,CAAA,aAAA,CAAC,OAAA,CAAD,IAAA,EAAA;AAAM,MAAA,UAAU,EAAC;AAAjB,KAAA,EAA6BA,IAAI,CAlBnB,KAkBd,CADF,CAhBF,CADkB;AAFxB,GAEK,CADH,CADF;AAVF,CAAA;;eAsCeX,U","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { Box, Center, Text, SystemProps, SimpleGrid } from '@chakra-ui/react'\nimport { isThisHour } from 'date-fns'\nimport { WeekPlannerConfig, defaultConfig } from '../utils/WeekPlannerConfig'\nimport dayHours from '../utils/dayHours'\n\ninterface TimeColumnProps {\n  date: Date\n  gap: SystemProps['gridGap']\n  config?: WeekPlannerConfig\n}\n\nconst TimeColumn = ({ date, gap, config = defaultConfig }: TimeColumnProps) => {\n  const { timeslotHeight, isSkeleton } = config\n  const currentTimeRef = useRef<HTMLDivElement>(null)\n  useEffect(() => {\n    if (isSkeleton) return\n    const currentTime = currentTimeRef.current\n    if (!currentTime) return\n    currentTime.scrollIntoView({ block: 'center', behavior: 'smooth' })\n  }, [currentTimeRef, date, isSkeleton])\n\n  return (\n    <SimpleGrid columns={1} gap={gap}>\n      {dayHours(date).map((hour) => (\n        <Box\n          ref={\n            isThisHour(\n              new Date(\n                date.getFullYear(),\n                date.getMonth(),\n                date.getDate(),\n                hour.raw\n              )\n            )\n              ? currentTimeRef\n              : undefined\n          }\n          key={hour.label}\n          height={`${timeslotHeight}px`}\n        >\n          <Center>\n            <Text fontWeight=\"semibold\">{hour.label}</Text>\n          </Center>\n        </Box>\n      ))}\n    </SimpleGrid>\n  )\n}\n\nexport default TimeColumn\n"]},"metadata":{},"sourceType":"script"}